/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package rsa

import java.util.Random

class RSA(e: BigNumber, d: BigNumber, n: BigNumber) {

  /**
    * Зашифровать.
    *
    * @param message сообщение
    * @return шифр
    */
  def encrypt(message: Array[Byte]): Array[Byte] = {
    return new BigNumber(message).modPow(e, n).toByteArray
  }

  /**
    * Расшифровать.
    *
    * @param message сообщение
    * @return рисшифрованное сообщение
    */
  def decrypt(message: Array[Byte]): Array[Byte] = {
    return new BigNumber(message).modPow(d, n).toByteArray
  }
}

object RSA {

  /**
    * Сгенерировать открытый и закрытый RSA ключ
    *
    * @param length длинна простых чисел p и q
    * @return кортеэ из чисел e, d, n
    */
  def generateKeys(length: Int): (BigNumber, BigNumber, BigNumber) = {
    val r = new Random()
    val p = BigNumber.probablePrime(length, r)
    val q = BigNumber.probablePrime(length, r)
    val n = p * q
    val phi = (p - 1) * (q - 1)
    var e = BigNumber.probablePrime(length / 2, r)
    while (phi.gcd(e).compareTo(1) > 0 && e.compareTo(phi) < 0) {
      e = e + 1
    }
    val d = e.modInverse(phi)
    (e, d, n)
  }
}